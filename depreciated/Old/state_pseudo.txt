Jacob and David deliverable 5/1

Main idea: 2 classes, one to make sure all parameters of the pod are in a safe condition to either begin
or continue pod motion, and a second class that is in charge of the motion of the pod, and relies upon
data from the first class at every dt to ensure it can continue along its intended motion.


class Safety:

    fields:
    (all sensor reading, including but not limited to)
    -current_temp
    -current_accelerometer
    -current_proximity
    -current_imu

    functions:
    -for each sensor, a function to ensure it is initally working properly, by giving it the current
    sensor read and then an expected range of reasonable values, returns true if the sensor 
    is properly initialized, false otherwise.
    -initial verification: ensures that no sensor has an error or an unexpected value,
    calls all sensor initialization functions, and returns true if they all return true, 
    and false otherwise.
    -in-flight helper functions: for each sensor, asserts that the sensor is a) working and
    b) is not giving an unsafe value (ie too high of a temperature, distance too short, etc)
    -state estimation function: checks that no sensors are giving extreme/dangerous in flight,
    calls all in-flight helper functions, and returns true if they all return true, and false otherwise


class Motion:

    fields:
    -state: state of the pod (pre-acceleration, acceleration, deceleration, crawl, etc)
    -is_safe: initialized to true, calls functions in Safety
    -distance_to_end: how far away the pod is from the end of the track
    -possible_updates: a map from a state to the possible states it 
    can update to 

    functions:
    -command parser: helper to parse commands
    -manual override: reads in command-line input, and changes state as user desires 
    -off: turns the pod off
    -stop: stops the pod
    -emergency: immediatly apply brakes and terminate propulsion (if necessary) then stop the pod
    -lock_breaks: locks the breaks open to begin per-acceleration
    -accelerate: dual motors propel the pod
    -cruise: once pod hits desired velocity, terminate acceleration
    -deceleration: brakes move into place gently
    -crawl: slow acceleration if the pod did not reach the end of the track
    -initialization: calls initial_verification in Safety, if true, then updates state
    to pre-acceleration, otherwise stops the pod
    -state_change: called every dt, first calls state estimation function to ensure pod is safe,
    if state estimation returns false, then immediately call emergency function. If pod is working,
    have conditionals to check what current state the pod is in. If within the pod's current state,
    the parameters dictate a change (acceleration reached desired velocity, cruise is close to end of track,
    etc.), then self.state is updated (if possible_updates has such a mapping),
     and the corresponding function is called. If no change needs to be made
    to state, the function does nothing, and the current helper function continues being called.